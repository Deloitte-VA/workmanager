buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath 'com.eriwen:gradle-js-plugin:1.12.0'
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.4'
    }
}

plugins {
    id "io.spring.dependency-management" version "0.4.0.RELEASE"
}

version projVersion
group "com.github.jlgrock.autograder"

// IDE plugins
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

// tool for running spring boot environment
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

// standard web packaging and deployment
apply plugin: 'war'
apply plugin: 'js'
apply plugin: 'css'


ext {
    gradleWrapperVersion = project.gradleWrapperVersion
}


repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/libs-snapshot" }
}

configurations {
    providedRuntime
}

configurations.all {
    exclude group: 'commons-logging'
    exclude group: 'org.apache.logging.log4j'
    exclude group: 'log4j'
}

dependencies {
    compile(
            "org.codehaus.groovy:groovy-all:2.3.6", // Groovy
            "org.springframework.boot:spring-boot-starter-web", // Webapp
            "org.springframework.boot:spring-boot-starter-data-jpa", // for Data
            "org.springframework.boot:spring-boot-starter-security", // for creating user authentication
            "org.liquibase:liquibase-core:3.4.1", // For stateful database migrations

            "org.apache.poi:poi:3.13-beta1", // Apache POI for reading/writing excel documents
            'org.hibernate:hibernate-validator:5.2.0.Beta1', // add JSR-303 annotations
            'org.slf4j:slf4j-api:1.7.12', // Logging

            // UI stuff
            "org.webjars:jquery:2.1.1", // for DOM manipulation and use in angularJs for server communication
            "org.webjars:angularjs:1.3.8", // for client-server eventing
            "org.webjars:bootstrap:3.2.0", // for style
            "org.webjars.bower:angular-bootstrap:0.12.1", // binds bootstrap css to angularjs

    )

    // jars provided at runtime
    runtime(
            "postgresql:postgresql:9.1-901-1.jdbc4",
            "ch.qos.logback:logback-classic:1.1.3",
    )

    providedRuntime(
            //"org.springframework.boot:spring-boot-starter-tomcat",

    )

    testCompile(
            "org.springframework.boot:spring-boot-starter-test", // for testing spring stuff
            "org.hamcrest:hamcrest-core:1.3", // for using matchers
            "org.spockframework:spock-core:1.0-groovy-2.4" // to use Spock, the best way to test your code
    )

    testRuntime (
            "cglib:cglib-nodep:3.1",  // allows mocking of classes (in addition to interfaces)
            "org.objenesis:objenesis:2.1", // allows mocking of classes without default constructor (together with CGLIB)
            "com.h2database:h2:1.4.182" //test db
    )

}



def webDir = "src/main/webapp"
def appDir = "${webDir}/app"

combineJs {
    group = null // hides from the 'gradle tasks'

    // pull together the source from string & file lists
    //  eg. def core = ["$webAppDirName/init.js",...]
    source = ["${appDir}/app.js"] +
            fileTree(dir: "${appDir}/directives", include: "**/*.js" ) +
            fileTree(dir: "${appDir}/services", include: "**/*.js" ) +
            fileTree(dir: "${appDir}/controllers", include: "**/*.js" )

    include "*.js"
    exclude "*.min.js"

    // show the resolved files when gradle is run with -d
    source.each{ logger.debug ("$it") }

    dest = file("${buildDir}/js/${projName}.${version}.js")
}

combineCss {
    group = null // hides from the 'gradle tasks'

    source = ["${webDir}/css"]
    dest = "${buildDir}/all.css"

    source.each { logger.info "Combining $it"}
}

task combine(dependsOn: [combineJs, combineCss]) {
    group = "Build"
    description = "Combine all appropraite JavaScript files and all appropriate CSS files"
}

compileJava {
    //enable compilation in a separate daemon process
    options.fork = true
    //enable incremental compilation
    options.incremental = true
}

compileGroovy {
    //enable compilation in a separate daemon process
    options.fork = true
    //enable incremental compilation
    options.incremental = true
}

minifyJs {
    group = null // hides from the 'gradle tasks'
    it.dependsOn tasks.combineJs

    source = combineJs
    dest = file("${buildDir}/js/${projName}.${version}.min.js")
    sourceMap = file("${buildDir}/js/${projName}.${version}.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
        //compilerOptions.defineReplacements = ['MY_DBUG_FLAG':false]
    }
}

minifyCss {
    group = null // hides from the 'gradle tasks'
    it.dependsOn combineCss

    source = combineCss
    dest = "${buildDir}/css/${projName}.${version}.min.css"
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

task minify(dependsOn: [minifyJs, minifyCss]) {
    group = "Build"
    description = "Minify both the JavaScript and CSS files"
}

gzipJs {
    group = null // hides from the 'gradle tasks'
    it.dependsOn tasks.minifyJs

    source = minifyJs.dest
    dest = file("${buildDir}/js/${projName}.${version}.min.js.gz")
}

gzipCss {
    group = null // hides from the 'gradle tasks'
    it.dependsOn tasks.minifyCss

    source = minifyCss
    dest = "${buildDir}/css/${projName}.${version}.min.css.gz"
}

task gzip(dependsOn: [gzipJs, gzipCss]) {
    group = "Build"
    description = "Gzip both the JavaScript and CSS files"
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

war {
    it.dependsOn tasks.gzip

    from( "${buildDir}/js", {
        into "minified"
    })
    from( "${buildDir}/css", {
        into "minified"
    })
}

// Lets you remote debug the Spring Boot application.  Useful if you are having issues running it in your IDE
// to use, just uncomment this out
//bootRun {
//    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=y']
//}
