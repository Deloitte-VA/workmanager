(function() {
    /**
     * Config
     */
    var moduleName = 'com.github.jlgrock.informatix.workmanager';
    module = angular.module(moduleName);

    module.controller('assignmentsCtrl',
        function ($scope, $location, $http, $log, processResponse, stateKeeper, fileUtils) {

            /**
             * Handle State based info
             */
            $scope.error = stateKeeper.error;

            /**
             * Define data for binding
             */
            $scope.searchparams = {};
            $scope.batches = [];


            $scope.getBatches = function() {
                var url = '/batches/';
                if ($scope.searchparams.batchName) {
                    url += '?searchTerm=' + $scope.searchparams.batchName;
                }
                $http.get(url).then(
                    function (response) {
                        $scope.batches = response.data;
                        $scope.determineStatusClasses();
                    },
                    function(response) {
                        $log.error("Unable to get batch list");
                        processResponse.processErrorResponse(response);
                    }
                );
            };

            $scope.determineStatusClasses = function() {
                var i = 0;
                for (; i < $scope.batches.length; i = i + 1) {
                    var assignments = $scope.batches[i].assignments;
                    var j = 0, count = 0, completed = 0;
                    for (; j < assignments.length; j = j + 1) {
                        if (assignments[j].isAutoGenerated === false) {
                            count++;
                            if (assignments[j].completedAssignment !== null
                                && assignments[j].completedAssignment.uploadDate !== null
                                && assignments[j].billableHours !== null) {
                                completed++;
                            }
                        }
                    }
                    if (count > 0 && completed == count) {
                        $scope.batches[i].status = "Completed"
                        $scope.batches[i].class = "panel-success";
                    } else if (count > 0) {
                        $scope.batches[i].status = "Uncompleted"
                        $scope.batches[i].class = "panel-danger";
                    } else {
                        $scope.batches[i].status = "Unassigned"
                        $scope.batches[i].class = "panel-default";
                    }
                }
            };

            $scope.createBatch = function() {
                $location.path( "/batch" );
            };

            $scope.addAssignment = function(batchId) {
                $location.path( "/assignment/" + batchId);
            };

            $scope.deleteAssignment = function (batchId, assignmentId) {
                if (angular.isUndefined(batchId) || angular.isUndefined(assignmentId)) {
                    $log.error("Unable to delete User with undefined id");
                    return;
                }
                $log.log("remove assignment=" + assignmentId);
                if (confirm("Are you sure you want to remove this assignment from the system?")) {
                    $http.delete('assignments/' + assignmentId).then(function () {
                        removeFromBatchesArray(batchId, assignmentId);
                        $scope.determineStatusClasses();
                        $log.info("Assignment " + assignmentId + " properly deleted");
                    }, function (response) {
                        $log.error("Unable to delete User " + assignmentId);
                        processResponse.processErrorResponse(response);
                    });
                }
                setInterval(function () {
                    $scope.$apply();
                }, 100);
            };

            var removeFromBatchesArray = function(batchId, assignmentId) {
                var i = 0, j = 0;
                for (; i < $scope.batches.length; i=i+1) {
                    if ($scope.batches[i].id === batchId) {
                        j = 0;
                        for(; j < $scope.batches[i].assignments.length; j=j+1) {
                            if ($scope.batches[i].assignments[j].id === assignmentId) {
                                $scope.batches[i].assignments.splice(j, 1);
                            }
                        }
                    }
                }
            };

            $scope.downloadAttachment = function(id) {

                fileUtils.download('attachments/' + id + '/download').then(
                    function () {
                        $log.info("Attachment " + id + " downloaded");

                    }, function (response) {
                        $log.error("Unable to download attachment " + id);
                        processResponse.processErrorResponse(response);
                    }
                );
            };

            $scope.uploadCompletedAssignment = function(assignmentId) {
                $location.path( "/assignment/complete/" + assignmentId );
            };

            $scope.setHours = function(assignmentId) {
                $location.path( "/hours/" + assignmentId );
            };

            var removeHoursFromAssignment = function(batchId, assignmentId) {
                var i = 0, j = 0;
                for (; i < $scope.batches.length; i=i+1) {
                    if ($scope.batches[i].id === batchId) {
                        j = 0;
                        for(; j < $scope.batches[i].assignments.length; j=j+1) {
                            if ($scope.batches[i].assignments[j].id === assignmentId) {
                                $scope.batches[i].assignments[j].billableHours = null;
                            }
                        }
                    }
                }
            };

            $scope.clearHours = function(batchId, assignmentId) {
                $http.delete('assignments/' + assignmentId + "/hours").then(function () {
                    removeHoursFromAssignment(batchId, assignmentId);
                    $scope.determineStatusClasses();
                    $log.info("Assignment " + assignmentId + " hours properly deleted");
                }, function (response) {
                    $log.error("Unable to delete hours for " + assignmentId);
                    processResponse.processErrorResponse(response);
                });
            };

            /**
             * Execute the things that need to be run at startup
             */
            stateKeeper.clearAll();
            $scope.getBatches();

        });
})();